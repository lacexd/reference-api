"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const depd = require("depd");
const deprecate = depd("json-api");
exports.displaySafe = Symbol("isJSONAPIDisplayReady");
class APIError extends Error {
    constructor(...args) {
        const newFormat = typeof args[0] === 'object';
        if (!newFormat) {
            deprecate("APIError with multiple arguments; " +
                "construct with a single object arg instead.");
        }
        const title = newFormat ? args[0].title : args[2];
        super(title && String(title));
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor || APIError);
        }
        const res = new Proxy(this, {
            set(obj, prop, value) {
                const coercePropToString = ["status", "code", "title", "detail"].indexOf(prop) > -1;
                obj[prop] = coercePropToString
                    ? value == null ? undefined : String(value)
                    : value;
                return true;
            }
        });
        if (args.length === 1 && typeof args[0] === 'object') {
            Object.assign(res, args[0]);
        }
        else {
            [res.status, res.code, res.title, res.detail, res.links] = args;
        }
        if (res.links) {
            deprecate("APIError.links; pass an `about` link template to the " +
                "resource type registry as error config instead. " +
                "See https://github.com/ethanresnick/json-api/blob/9396a4df4739f5671315b0e4e1a32c07feec4d4e/test/app/src/index.ts#L29");
        }
        if (res.code) {
            deprecate("APIError.code; use APIError.typeUri instead. " +
                "See https://github.com/ethanresnick/json-api/issues/151#issuecomment-375126009");
        }
        return res;
    }
    toJSON(urlTemplates) {
        const _a = this, { rawError, typeUri, code } = _a, serializableProps = __rest(_a, ["rawError", "typeUri", "code"]);
        const res = Object.assign({}, serializableProps, (typeUri || code ? { code: typeUri || code } : {}));
        if (urlTemplates && urlTemplates.about && !(res.links && res.links.about)) {
            return Object.assign({}, res, { links: { about: urlTemplates.about(this) } });
        }
        return res;
    }
    static fromError(err) {
        const ErrorConstructor = this || APIError;
        const fallbackTitle = "An unknown error occurred while trying to process this request.";
        if (err instanceof APIError) {
            return err;
        }
        else if (this.isDisplaySafe(err)) {
            if (err.isJSONAPIDisplayReady) {
                deprecate("isJSONAPIDisplayReady magic property: " +
                    "use the APIError.displaySafe symbol instead.");
            }
            return new ErrorConstructor({
                status: err.status || err.statusCode || 500,
                code: err.code,
                title: err.title || fallbackTitle,
                detail: err.detail || err.details || (err.message || undefined),
                links: err.links,
                rawError: err
            });
        }
        else {
            return new ErrorConstructor({
                status: 500,
                title: fallbackTitle,
                rawError: err
            });
        }
    }
    static isDisplaySafe(it) {
        return it && (it instanceof APIError || it[exports.displaySafe] || it.isJSONAPIDisplayReady);
    }
}
exports.default = APIError;
