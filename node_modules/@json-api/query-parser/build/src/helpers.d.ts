/// <reference types="ramda" />
import R = require("ramda");
import { RawFieldExpression } from './parser';
export declare type Identifier = {
    type: "Identifier";
    value: string;
};
export declare const isId: (it: any) => it is Identifier;
export declare type OperatorsConfig = {
    [operatorName: string]: {
        isBinary: boolean;
        finalizeArgs: (operators: OperatorsConfig, operator: string, args: any[]) => any[];
    } | undefined;
};
export declare type FieldExpression = {
    type: "FieldExpression";
    operator: string;
    args: any[];
};
export declare type SortField = ({
    field: string;
} | {
    expression: FieldExpression;
}) & {
    direction: "ASC" | "DESC";
};
export declare const isKnownOperator: R.CurriedTypeGuard2<OperatorsConfig, any, Identifier>;
export declare const isBinaryOperator: R.CurriedFunction2<OperatorsConfig, any, boolean>;
export declare const isNaryOperator: R.CurriedFunction2<OperatorsConfig, any, boolean>;
export declare const toFieldExpression: R.CurriedFunction2<OperatorsConfig, any, FieldExpression>;
export declare function finalizeFieldExpression(operators: OperatorsConfig, it: RawFieldExpression): {
    args: any[];
    type: "FieldExpression";
    operator: string;
};
